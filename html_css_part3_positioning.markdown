# Методичка по HTML и CSS: Часть 3 — Позиционирование в CSS

## 1. Что такое позиционирование в CSS?

Позиционирование в CSS позволяет точно управлять расположением элементов на странице. Свойство `position` определяет, как элемент позиционируется относительно своего нормального положения, родительского контейнера или окна браузера. Позиционирование помогает создавать сложные макеты, такие как фиксированные шапки, всплывающие меню или элементы, "прилипающие" к определённой области.

Свойство `position` работает в связке с координатами (`top`, `right`, `bottom`, `left`), которые задают смещение элемента.

## 2. Значения свойства `position`

Свойство `position` принимает следующие значения:

1. **`static`** (по умолчанию):
   - Элемент находится в нормальном потоке документа.
   - Координаты (`top`, `left` и т.д.) не работают.
   - Элементы располагаются так, как задано HTML-структурой.

2. **`relative`** (относительное позиционирование):
   - Элемент смещается относительно своего **изначального положения** в потоке.
   - Координаты (`top`, `left`, `right`, `bottom`) задают смещение.
   - Остальные элементы не замечают его смещения (место в потоке сохраняется).

3. **`absolute`** (абсолютное позиционирование):
   - Элемент **вынимается из потока** и позиционируется относительно **ближайшего позиционированного родителя** (с `position: relative`, `absolute` или `fixed`). Если такого родителя нет, то относительно окна браузера.
   - Координаты задают положение относительно родителя или окна.
   - Другие элементы занимают его место, как будто его нет.

4. **`fixed`** (фиксированное позиционирование):
   - Элемент фиксируется относительно **окна браузера**.
   - Не двигается при прокрутке страницы (например, для фиксированных шапок или кнопок).
   - Координаты задают положение относительно окна.

5. **`sticky`** (липкое позиционирование):
   - Гибрид `relative` и `fixed`. Элемент остаётся в потоке, пока не достигнет заданной точки при прокрутке, затем "прилипает" к краю (например, к верхнему краю окна).
   - Требует указания координат (например, `top: 0;`).

## 3. Координаты и их использование

Свойства `top`, `right`, `bottom`, `left` задают смещение элемента от соответствующего края. Они работают только для `position: relative`, `absolute`, `fixed` и `sticky`.

Пример:
```css
div {
    position: absolute;
    top: 20px;   /* 20px от верхнего края */
    left: 50px;  /* 50px от левого края */
}
```

- Для `relative`: Смещение от изначального положения.
- Для `absolute`/`fixed`: Смещение от края родителя или окна.
- Для `sticky`: Точка, где элемент "прилипает" при прокрутке.

## 4. Свойство `z-index`

Когда элементы перекрываются (например, при `position: absolute`), свойство `z-index` определяет их порядок по оси Z (глубина). Чем выше `z-index`, тем выше элемент в стеке.

Пример:
```css
.element1 {
    position: absolute;
    z-index: 10; /* Будет выше */
}
.element2 {
    position: absolute;
    z-index: 5;  /* Будет ниже */
}
```

- По умолчанию `z-index: auto` (элементы следуют порядку в HTML).
- Отрицательные значения (например, `z-index: -1`) помещают элемент под другие.

## 5. Пример: HTML + CSS с позиционированием

Создайте два файла: `index.html` и `styles.css`, чтобы увидеть, как работает позиционирование.

### index.html
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Позиционирование в CSS</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="relative-box">Относительный блок</div>
        <div class="absolute-box">Абсолютный блок</div>
        <div class="fixed-box">Фиксированный блок</div>
        <div class="sticky-box">Липкий блок</div>
        <p>Прокрутите страницу, чтобы увидеть sticky!</p>
        <p style="height: 1000px;">Длинный текст для прокрутки...</p>
    </div>
</body>
</html>
```

### styles.css
```css
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

.container {
    position: relative; /* Родитель для absolute */
    width: 600px;
    margin: 20px auto;
    border: 1px solid gray;
    padding: 20px;
}

.relative-box {
    position: relative;
    top: 20px;
    left: 30px;
    background-color: lightblue;
    padding: 10px;
    width: 200px;
}

.absolute-box {
    position: absolute;
    top: 50px;
    right: 20px;
    background-color: lightgreen;
    padding: 10px;
    width: 200px;
    z-index: 10; /* Выше других */
}

.fixed-box {
    position: fixed;
    top: 10px;
    right: 10px;
    background-color: lightcoral;
    padding: 10px;
    width: 200px;
}

.sticky-box {
    position: sticky;
    top: 0;
    background-color: lightyellow;
    padding: 10px;
    width: 200px;
    border: 2px solid orange;
}
```

**Что делает этот код?**
- **`.container`**: Родительский блок с `position: relative`, чтобы `.absolute-box` позиционировался относительно него.
- **`.relative-box`**: Смещён на 20px вниз и 30px вправо от своего нормального положения.
- **`.absolute-box`**: Расположен в правом верхнем углу контейнера (50px от верха, 20px от правого края).
- **`.fixed-box`**: Закреплён в правом верхнем углу окна браузера, не двигается при прокрутке.
- **`.sticky-box`**: "Прилипает" к верхнему краю при прокрутке, оставаясь видимым.

**Как протестировать?**
1. Создайте файлы `index.html` и `styles.css` в папке `methodichki`.
2. Откройте `index.html` в браузере.
3. Прокрутите страницу, чтобы увидеть эффект `sticky` и `fixed`.

## 6. Полезные советы

- **Используйте `relative` для небольших смещений**: Например, для декоративных эффектов.
- **Осторожно с `absolute`**: Элементы выходят из потока, что может ломать макет. Всегда задавайте `position: relative` родителю.
- **Проверяйте `z-index`**: Если элементы перекрываются неправильно, проверьте их `z-index`.
- **Тестируйте `sticky`**: Работает только в контейнере с достаточной высотой для прокрутки.
- **Избегайте сложных макетов с `position`**: Для современных макетов лучше использовать Flexbox или Grid (рассмотрим в следующих частях).

## 7. Задания для закрепления

Создайте HTML и CSS файлы, протестируйте в браузере и ответьте на вопросы. Если хотите, поделитесь кодом — мы проверим!

1. **Фиксированная кнопка**:
   - Создайте кнопку с текстом "Наверх" в правом нижнем углу окна браузера (`position: fixed`).
   - Задайте: `background-color: blue`, `color: white`, `padding: 10px`, `border-radius: 5px`.
   - Вопрос: Как сделать так, чтобы кнопка не двигалась при прокрутке?

2. **Абсолютный элемент в контейнере**:
   - Создайте `<div class="container">` с `position: relative` и `<div class="badge">` внутри с `position: absolute`.
   - Расположите `badge` в левом верхнем углу контейнера (`top: 0; left: 0;`).
   - Задайте `badge`: `background-color: red`, `width: 50px`, `height: 50px`.
   - Вопрос: Что произойдёт, если убрать `position: relative` у контейнера?

3. **Липкий заголовок**:
   - Создайте `<h2>` с текстом "Меню" и `position: sticky`, чтобы он прилипал к верху при прокрутке.
   - Добавьте длинный `<p>` (например, `height: 1000px`), чтобы проверить прокрутку.
   - Вопрос: Почему `sticky` может не работать, если контейнер слишком короткий?

4. **Перекрытие элементов**:
   - Создайте два `<div>` с `position: absolute`, один с `z-index: 5`, другой с `z-index: 10`.
   - Задайте им перекрывающиеся координаты (например, `top: 50px; left: 50px;`).
   - Вопрос: Какой блок окажется сверху и почему?
