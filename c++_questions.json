{
    "questions": [
        {
            "question": "Что такое C++?",
            "options": [
                "Интерпретируемый язык программирования",
                "Компилируемый язык программирования общего назначения",
                "Язык разметки для веб-страниц",
                "База данных"
            ],
            "correct": "b",
            "explanation": "C++ — это компилируемый, статически типизированный язык программирования общего назначения."
        },
        {
            "question": "Какой оператор используется для вывода в консоль в C++?",
            "options": [
                "print()",
                "console.log()",
                "cout <<",
                "printf()"
            ],
            "correct": "c",
            "explanation": "В C++ для вывода в консоль используется оператор cout << из библиотеки iostream."
        },
        {
            "question": "Как объявить целочисленную переменную в C++?",
            "options": [
                "var number = 10;",
                "int number = 10;",
                "integer number = 10;",
                "number = 10;"
            ],
            "correct": "b",
            "explanation": "Целочисленная переменная объявляется с помощью ключевого слова int."
        },
        {
            "question": "Что делает оператор new в C++?",
            "options": [
                "Создает новый класс",
                "Выделяет динамическую память",
                "Объявляет новую переменную",
                "Создает новый файл"
            ],
            "correct": "b",
            "explanation": "Оператор new используется для динамического выделения памяти во время выполнения программы."
        },
        {
            "question": "Какой заголовочный файл нужно подключить для использования cout?",
            "options": [
                "<cstdio>",
                "<iostream>",
                "<console>",
                "<output>"
            ],
            "correct": "b",
            "explanation": "Для использования cout необходимо подключить заголовочный файл <iostream>."
        },
        {
            "question": "Что такое указатель в C++?",
            "options": [
                "Переменная, хранящая значение",
                "Переменная, хранящая адрес другой переменной",
                "Функция для указания на объект",
                "Оператор для работы с памятью"
            ],
            "correct": "b",
            "explanation": "Указатель — это переменная, которая хранит адрес другой переменной в памяти."
        },
        {
            "question": "Как объявить указатель на целое число?",
            "options": [
                "int ptr;",
                "int *ptr;",
                "pointer ptr;",
                "&int ptr;"
            ],
            "correct": "b",
            "explanation": "Указатель на целое число объявляется как int *ptr;"
        },
        {
            "question": "Что такое ссылка в C++?",
            "options": [
                "Альтернативное имя для переменной",
                "Указатель на константу",
                "Ссылка на функцию",
                "Оператор взятия адреса"
            ],
            "correct": "a",
            "explanation": "Ссылка в C++ — это альтернативное имя для существующей переменной."
        },
        {
            "question": "Как объявить ссылку на целое число?",
            "options": [
                "int &ref = number;",
                "int ref = &number;",
                "ref int = number;",
                "int *ref = number;"
            ],
            "correct": "a",
            "explanation": "Ссылка объявляется с помощью оператора & после типа: int &ref = number;"
        },
        {
            "question": "Что такое класс в C++?",
            "options": [
                "Функция для группировки кода",
                "Пользовательский тип данных",
                "Библиотека стандартных функций",
                "Модуль программы"
            ],
            "correct": "b",
            "explanation": "Класс в C++ — это пользовательский тип данных, который объединяет данные и методы для работы с ними."
        },
        {
            "question": "Какой модификатор доступа используется по умолчанию в классе C++?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "correct": "b",
            "explanation": "По умолчанию члены класса в C++ имеют модификатор доступа private."
        },
        {
            "question": "Что такое конструктор класса?",
            "options": [
                "Функция для уничтожения объекта",
                "Функция для инициализации объекта",
                "Функция для копирования объекта",
                "Функция для преобразования типа"
            ],
            "correct": "b",
            "explanation": "Конструктор — это специальная функция-член класса, которая вызывается при создании объекта для его инициализации."
        },
        {
            "question": "Что такое наследование в C++?",
            "options": [
                "Процесс создания нового класса из существующего",
                "Процесс скрытия реализации",
                "Процесс перегрузки операторов",
                "Процесс обработки исключений"
            ],
            "correct": "a",
            "explanation": "Наследование позволяет создавать новый класс на основе существующего, наследуя его свойства и методы."
        },
        {
            "question": "Что такое полиморфизм в C++?",
            "options": [
                "Возможность использовать одно имя для различных действий",
                "Сокрытие реализации деталей",
                "Создание иерархии классов",
                "Обработка ошибок времени выполнения"
            ],
            "correct": "a",
            "explanation": "Полиморфизм позволяет использовать одно имя для обозначения различных действий в зависимости от контекста."
        },
        {
            "question": "Что такое шаблоны в C++?",
            "options": [
                "Стандартные библиотеки",
                "Механизм для создания обобщенных функций и классов",
                "Шаблоны проектирования",
                "Предкомпилированные заголовки"
            ],
            "correct": "b",
            "explanation": "Шаблоны позволяют создавать обобщенные функции и классы, которые могут работать с различными типами данных."
        },
        {
            "question": "Что такое STL в C++?",
            "options": [
                "Standard Template Library - библиотека стандартных шаблонов",
                "Simple Type Language - простой язык типов",
                "System Template Loader - загрузчик системных шаблонов",
                "Standard Type Library - библиотека стандартных типов"
            ],
            "correct": "a",
            "explanation": "STL (Standard Template Library) — это библиотека стандартных шаблонов, содержащая контейнеры, алгоритмы и итераторы."
        },
        {
            "question": "Какой контейнер STL реализует динамический массив?",
            "options": [
                "std::list",
                "std::vector",
                "std::array",
                "std::map"
            ],
            "correct": "b",
            "explanation": "std::vector — это контейнер, который реализует динамический массив с автоматическим изменением размера."
        },
        {
            "question": "Что такое исключение в C++?",
            "options": [
                "Ошибка компиляции",
                "Событие, возникающее при нарушении нормального хода программы",
                "Предупреждение компилятора",
                "Особый тип данных"
            ],
            "correct": "b",
            "explanation": "Исключение — это событие, которое возникает во время выполнения программы и нарушает ее нормальный ход."
        },
        {
            "question": "Как обработать исключение в C++?",
            "options": [
                "С помощью оператора if-else",
                "С помощью конструкций try-catch",
                "С помощью оператора switch",
                "С помощью директив препроцессора"
            ],
            "correct": "b",
            "explanation": "Для обработки исключений используются конструкции try-catch."
        },
        {
            "question": "Что такое пространство имен (namespace) в C++?",
            "options": [
                "Область видимости для переменных",
                "Контейнер для группировки связанных идентификаторов",
                "Файл с исходным кодом",
                "Библиотека функций"
            ],
            "correct": "b",
            "explanation": "Пространство имен — это механизм для группировки связанных идентификаторов и предотвращения конфликтов имен."
        },
        {
            "question": "Какой тип данных используется для хранения символов в C++?",
            "options": [
                "string",
                "char",
                "character",
                "text"
            ],
            "correct": "b",
            "explanation": "Для хранения одиночных символов используется тип данных char."
        },
        {
            "question": "Что такое перегрузка функций в C++?",
            "options": [
                "Создание функций с одинаковыми именами, но разными параметрами",
                "Увеличение производительности функций",
                "Замена старых функций новыми",
                "Сокрытие реализации функций"
            ],
            "correct": "a",
            "explanation": "Перегрузка функций позволяет создавать несколько функций с одинаковым именем, но разными параметрами."
        },
        {
            "question": "Какой оператор используется для динамического выделения памяти для массива?",
            "options": [
                "new[]",
                "malloc",
                "allocate",
                "create"
            ],
            "correct": "a",
            "explanation": "Для динамического выделения памяти для массива используется оператор new[]."
        },
        {
            "question": "Что такое виртуальная функция в C++?",
            "options": [
                "Функция, которая не имеет реализации",
                "Функция, которая может быть переопределена в производных классах",
                "Функция, которая выполняется быстрее обычной",
                "Функция, которая не принимает параметры"
            ],
            "correct": "b",
            "explanation": "Виртуальная функция может быть переопределена в производных классах и поддерживает полиморфизм."
        },
        {
            "question": "Какой заголовочный файл нужен для работы с математическими функциями?",
            "options": [
                "<math>",
                "<cmath>",
                "<math.h>",
                "<algorithm>"
            ],
            "correct": "b",
            "explanation": "Для работы с математическими функциями нужно подключить заголовочный файл <cmath>."
        },
        {
            "question": "Что такое деструктор класса?",
            "options": [
                "Функция для создания объекта",
                "Функция для инициализации объекта",
                "Функция для уничтожения объекта",
                "Функция для копирования объекта"
            ],
            "correct": "c",
            "explanation": "Деструктор — это специальная функция-член класса, которая вызывается при уничтожении объекта."
        },
        {
            "question": "Как объявить константу в C++?",
            "options": [
                "const int MAX = 100;",
                "constant int MAX = 100;",
                "int const MAX = 100;",
                "#define MAX 100"
            ],
            "correct": "a",
            "explanation": "Константа объявляется с помощью ключевого слова const: const int MAX = 100;"
        },
        {
            "question": "Что такое inline-функция в C++?",
            "options": [
                "Функция, которая всегда возвращает true",
                "Функция, которая встраивается в место вызова",
                "Функция, которая работает только в одной строке",
                "Функция, которая не может быть изменена"
            ],
            "correct": "b",
            "explanation": "Inline-функция встраивается в место вызова для уменьшения накладных расходов на вызов функции."
        },
        {
            "question": "Какой оператор используется для освобождения динамической памяти?",
            "options": [
                "free",
                "delete",
                "release",
                "remove"
            ],
            "correct": "b",
            "explanation": "Для освобождения динамической памяти используется оператор delete."
        },
        {
            "question": "Что такое friend-функция в C++?",
            "options": [
                "Функция, которая дружественна ко всем классам",
                "Функция, которая имеет доступ к private-членам класса",
                "Функция, которая всегда возвращает дружественный результат",
                "Функция, которая не может быть изменена"
            ],
            "correct": "b",
            "explanation": "Friend-функция имеет доступ к private- и protected-членам класса, не будучи его членом."
        }
    ]
}